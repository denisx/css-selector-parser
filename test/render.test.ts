import {createParser, render} from './import.js';

const testCases = {
    '.class': '.class',
    '.class1.class2': '.class1.class2',
    'tag.class': 'tag.class',
    'tag#id.class': 'tag#id.class',
    'tag#id.class[attr]': 'tag#id.class[attr]',
    'tag#id.class[ attr ]': 'tag#id.class[attr]',
    'tag#id.class[attr=value]': 'tag#id.class[attr="value"]',
    'tag#id.class[attr~=value]': 'tag#id.class[attr~="value"]',
    'tag#id.class[attr*=value]': 'tag#id.class[attr*="value"]',
    'tag#id.class[attr^=value]': 'tag#id.class[attr^="value"]',
    'tag#id.class[attr$=value]': 'tag#id.class[attr$="value"]',
    'tag#id.class[attr$=value i]': 'tag#id.class[attr$="value" i]',
    'tag#id.class[attr$=value I]': 'tag#id.class[attr$="value" I]',
    'tag#id.class[attr$=value s]': 'tag#id.class[attr$="value" s]',
    'tag#id.class[attr$=value S]': 'tag#id.class[attr$="value" S]',
    'tagname[     x =    y    ]': 'tagname[x="y"]',
    'tagname[x="y"]': 'tagname[x="y"]',
    "tagname[x='y']": 'tagname[x="y"]',
    'tagname[x="y"': 'tagname[x="y"]',
    "tagname[x='y'": 'tagname[x="y"]',
    'tagname[x=y': 'tagname[x="y"]',
    'tagname[x=y i': 'tagname[x="y" i]',
    'tagname[x="y"][z]': 'tagname[x="y"][z]',
    'tagname[x="y "]': 'tagname[x="y "]',
    'tagname[x="y \\""]': 'tagname[x="y \\""]',
    'tagname[x="y\'"]': 'tagname[x="y\'"]',
    "tagname[x='y \\'']": 'tagname[x="y \'"]',
    'tag1     tag2': 'tag1 tag2',
    'ns1|tag1': 'ns1|tag1',
    '|tag1': '|tag1',
    '*|tag1': '*|tag1',
    '*|*': '*|*',
    '*|*||*|*': '*|* || *|*',
    'tag1>tag2': 'tag1 > tag2',
    'tag1+tag2': 'tag1 + tag2',
    'tag1~tag2': 'tag1 ~ tag2',
    'tag1:first': 'tag1:first',
    'tag1:lt(a3)': 'tag1:lt(a3)',
    'tag1:lt($var)': 'tag1:lt($var)',
    'tag1:lt($var': 'tag1:lt($var)',
    'tag1:lt(a3': 'tag1:lt(a3)',
    'tag1:lang(en\\))': 'tag1:lang(en\\))',
    'tag1:nth-child(odd)': 'tag1:nth-child(2n+1)',
    'tag1:nth-child(even)': 'tag1:nth-child(2n)',
    'tag1:nth-child( odd )': 'tag1:nth-child(2n+1)',
    'tag1:nth-child( even )': 'tag1:nth-child(2n)',
    'tag1:nth-child(-n+3)': 'tag1:nth-child(-n+3)',
    'tag1:nth-child(-1n+3)': 'tag1:nth-child(-n+3)',
    'tag1:nth-child(-5n+3)': 'tag1:nth-child(-5n+3)',
    'tag1:nth-child(-5n-3)': 'tag1:nth-child(-5n-3)',
    'tag1:nth-child(-5\\n-3)': 'tag1:nth-child(-5n-3)',
    'tag1:nth-child(-5\\6e-3)': 'tag1:nth-child(-5n-3)',
    'tag1:nth-child(-5n)': 'tag1:nth-child(-5n)',
    'tag1:nth-child(5)': 'tag1:nth-child(5)',
    'tag1:nth-child(-5)': 'tag1:nth-child(-5)',
    'tag1:nth-child(0)': 'tag1:nth-child(0)',
    'tag1:nth-child(n)': 'tag1:nth-child(n)',
    'tag1:nth-child(-n)': 'tag1:nth-child(-n)',
    'tag1:has(.class)': 'tag1:has(.class)',
    'tag1:has(.class,.class2)': 'tag1:has(.class, .class2)',
    'tag1:has(.class:has(.subcls),.class2)': 'tag1:has(.class:has(.subcls), .class2)',
    'tag1:has(> div)': 'tag1:has(> div)',
    'tag1:current(.class:has(.subcls),.class2)': 'tag1:current(.class:has(.subcls), .class2)',
    'tag1:current': 'tag1:current',
    'tag1::before': 'tag1::before',
    'tag1::hey(hello)': 'tag1::hey(hello)',
    'tag1::hey(hello': 'tag1::hey(hello)',
    'tag1::num(1)': 'tag1::num(\\31)',
    'tag1::num($var)': 'tag1::num($var)',
    'tag1::num($var': 'tag1::num($var)',
    'tag1::none': 'tag1::none',
    '*': '*',
    '*.class': '*.class',
    '* + *': '* + *',
    'tag\\/name': 'tag\\/name',
    '.class\\/name': '.class\\/name',
    '#id\\/name': '#id\\/name',
    '.\\30 wow': '.\\30 wow',
    '.\\30wow': '.\\30 wow',
    '.\\20wow': '.\\20 wow',
    'tag\\n\\\\name\\.\\[': 'tagn\\\\name\\.\\[',
    '.cls\\n\\\\name\\.\\[': '.clsn\\\\name\\.\\[',
    '[attr\\n\\\\name\\.\\[=a1]': '[attrn\\\\name\\.\\[="a1"]',
    ':pseudo\\n\\\\name\\.\\[\\((123)': ':pseudon\\\\name\\.\\[\\((\\31 23)',
    '[attr="val\nval"]': '[attr="val\\nval"]',
    '[attr="val\\"val"]': '[attr="val\\"val"]',
    '[attr="val\\00a0val"]': '[attr="valÂ val"]',
    'tag\\00a0 tag': 'tag\\a0 tag',
    '.class\\00a0 class': '.class\\a0 class',
    '[attr\\a0 attr]': '[attr\\a0 attr]',
    '[attr=$var]': '[attr=$var]',
    '.cls1.cls2#y .cls3+abc#def[x=y]>yy,ff': '.cls1.cls2#y .cls3 + abc#def[x="y"] > yy, ff',
    '#google_ads_iframe_\\/100500\\/Pewpew_0': '#google_ads_iframe_\\/100500\\/Pewpew_0',
    '#\\3123': '#\\3123',
    '#\\31 23': '#\\31 23',
    '#\\00031 23': '#\\31 23',
    '#\\0003123': '#\\3123',
    '#\\0004123': '#\\4123',
    '#\\0o': '#\\0 o'
};

describe('render()', () => {
    const parse = createParser({
        syntax: 'progressive',
        substitutes: true,
        strict: false
    });
    for (const [source, output] of Object.entries(testCases)) {
        it(source, () => expect(render(parse(source))).toEqual(output));
    }
});
